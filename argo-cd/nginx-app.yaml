# Microservice Deployment - nginx-app.yaml
---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-app
  labels:
    name: nginx-app

---
# ConfigMap for NGINX configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx-app
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        server {
            listen 80;
            server_name _;
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ =404;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /api {
                proxy_pass http://backend-service:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /metrics {
                access_log off;
                return 200 "# HELP nginx_requests_total Total number of requests\n# TYPE nginx_requests_total counter\nnginx_requests_total 1\n";
                add_header Content-Type text/plain;
            }
        }
    }
  
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>NGINX Microservice</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background-color: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }
            .info {
                background-color: #e8f4fd;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
            }
            .status {
                display: flex;
                justify-content: space-between;
                align-items: center;
                background-color: #d4edda;
                padding: 10px 15px;
                border-radius: 5px;
                margin: 10px 0;
            }
            .endpoint {
                background-color: #f8f9fa;
                padding: 10px;
                border-left: 4px solid #007bff;
                margin: 10px 0;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ðŸš€ NGINX Microservice Application</h1>
            
            <div class="status">
                <span><strong>Status:</strong> Running</span>
                <span><strong>Version:</strong> 1.0.0</span>
            </div>
            
            <div class="info">
                <h3>Application Information</h3>
                <p><strong>Service:</strong> NGINX Frontend Microservice</p>
                <p><strong>Environment:</strong> Production EKS Cluster</p>
                <p><strong>Storage:</strong> EBS Persistent Volume</p>
                <p><strong>Secrets:</strong> AWS Secrets Manager Integration</p>
            </div>
            
            <div class="endpoint">
                <h4>Available Endpoints:</h4>
                <ul>
                    <li><code>/health</code> - Health check endpoint</li>
                    <li><code>/metrics</code> - Prometheus metrics</li>
                    <li><code>/api</code> - Backend API proxy</li>
                </ul>
            </div>
            
            <div class="info">
                <h3>Infrastructure Details</h3>
                <ul>
                    <li>âœ… EKS Cluster v1.28</li>
                    <li>âœ… AWS Load Balancer Controller</li>
                    <li>âœ… EBS CSI Driver</li>
                    <li>âœ… EFS CSI Driver</li>
                    <li>âœ… AWS Secrets Manager CSI</li>
                    <li>âœ… Auto-scaling enabled</li>
                </ul>
            </div>
        </div>
    </body>
    </html>

---
# Secret for application secrets (using AWS Secrets Manager)
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: nginx-app
type: Opaque
data:
  # Base64 encoded values - in production, use External Secrets Operator
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAZGItc2VydmljZTo1NDMyL215ZGI=
  api-key: eW91ci1hcGkta2V5LWhlcmU=
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWhlcmU=

---
# SecretProviderClass for AWS Secrets Manager
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: aws-secrets
  namespace: nginx-app
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "production-eks-cluster-app-secrets"
        objectType: "secretsmanager"
        jmesPath:
          - path: "database_url"
            objectAlias: "database-url"
          - path: "api_key"
            objectAlias: "api-key"
          - path: "jwt_secret"
            objectAlias: "jwt-secret"
  secretObjects:
    - secretName: aws-app-secrets
      type: Opaque
      data:
        - objectName: "database-url"
          key: "database-url"
        - objectName: "api-key"
          key: "api-key"
        - objectName: "jwt-secret"
          key: "jwt-secret"

---
# PersistentVolume for EBS storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-app-pv
  namespace: nginx-app
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: ebs-gp3
  csi:
    driver: ebs.csi.aws.com
    volumeHandle: "vol-replace-with-actual-volume-id"

---
# PersistentVolumeClaim for EBS storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-app-pvc
  namespace: nginx-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: ebs-gp3

---
# PersistentVolumeClaim for EFS shared storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-app-efs-pvc
  namespace: nginx-app
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: efs

---
# Deployment for NGINX application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app-deployment
  namespace: nginx-app
  labels:
    app: nginx-app
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
        version: v1.0.0
    spec:
      serviceAccountName: nginx-app-sa
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: api-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-html
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: nginx-data
          mountPath: /var/cache/nginx
        - name: shared-storage
          mountPath: /shared
        - name: aws-secrets
          mountPath: /mnt/secrets
          readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-html
        configMap:
          name: nginx-config
      - name: nginx-logs
        persistentVolumeClaim:
          claimName: nginx-app-pvc
      - name: nginx-data
        emptyDir: {}
      - name: shared-storage
        persistentVolumeClaim:
          claimName: nginx-app-efs-pvc
      - name: aws-secrets
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: aws-secrets
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx-app
              topologyKey: kubernetes.io/hostname

---
# Service Account for NGINX application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-app-sa
  namespace: nginx-app
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/production-eks-cluster-secrets-manager-csi-driver"

---
# ClusterIP Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: nginx-app-service
  namespace: nginx-app
  labels:
    app: nginx-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: nginx-app

---
# NodePort Service for external access
apiVersion: v1
kind: Service
metadata:
  name: nginx-app-nodeport
  namespace: nginx-app
  labels:
    app: nginx-app
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
    nodePort: 30080
  selector:
    app: nginx-app

---
# LoadBalancer Service (will create NLB)
apiVersion: v1
kind: Service
metadata:
  name: nginx-app-nlb
  namespace: nginx-app
  labels:
    app: nginx-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: nginx-app

---
# Ingress using AWS Load Balancer Controller (ALB)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-app-ingress
  namespace: nginx-app
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: nginx-app-alb
    alb.ingress.kubernetes.io/group.name: nginx-app
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT_ID:certificate/CERTIFICATE_ID
spec:
  ingressClassName: alb
  rules:
  - host: nginx-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-app-service
            port:
              number: 80
  - host: api.nginx-app.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nginx-app-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-app-hpa
  namespace: nginx-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-app-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-app-pdb
  namespace: nginx-app
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: nginx-app

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-app-netpol
  namespace: nginx-app
spec:
  podSelector:
    matchLabels:
      app: nginx-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: nginx-app
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-app-monitor
  namespace: nginx-app
  labels:
    app: nginx-app
spec:
  selector:
    matchLabels:
      app: nginx-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# BackendConfig for additional load balancer configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-app-backend-config
  namespace: nginx-app
data:
  backend.conf: |
    upstream backend {
        least_conn;
        server backend-service:8080 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 8080;
        
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            client_max_body_size 10M;
        }
    }

---
# Job for database migration or initial setup
apiVersion: batch/v1
kind: Job
metadata:
  name: nginx-app-init-job
  namespace: nginx-app
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-container
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          echo "Initializing application..."
          echo "Creating required directories..."
          mkdir -p /shared/logs /shared/cache /shared/uploads
          echo "Setting permissions..."
          chmod 755 /shared/logs /shared/cache /shared/uploads
          echo "Initialization complete!"
        volumeMounts:
        - name: shared-storage
          mountPath: /shared
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: nginx-app-efs-pvc

---
# CronJob for log rotation
apiVersion: batch/v1
kind: CronJob
metadata:
  name: nginx-app-logrotate
  namespace: nginx-app
spec:
  schedule: "0 2 * * *"  # Run at 2 AM daily
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: logrotate
            image: busybox:1.35
            command:
            - /bin/sh
            - -c
            - |
              echo "Running log rotation..."
              find /var/log/nginx -name "*.log" -type f -mtime +7 -delete
              echo "Log rotation completed!"
            volumeMounts:
            - name: nginx-logs
              mountPath: /var/log/nginx
          volumes:
          - name: nginx-logs
            persistentVolumeClaim:
              claimName: nginx-app-pvc
